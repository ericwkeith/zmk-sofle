#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <1>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <60>;
    acceleration-exponent = <0>;
};

&mt {
    tapping-term-ms = <260>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <0>;
    quick-tap-ms = <0>;
    bindings = <&kp>, <&kp>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    macros {
        eracmail: eracmail {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp R &kp I &kp C &kp DOT &kp K &kp E &kp I &kp T &kp H &kp AT &kp E &kp H &kp I &kp DOT &kp C &kp O &kp M>;
            label = "ERACMAIL";
        };

        elemail: elemail {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp K &kp E &kp I &kp T &kp H &kp AT &kp E &kp L &kp E &kp M &kp E &kp N &kp T &kp C &kp O &kp R &kp P &kp DOT &kp C &kp O &kp M>;
            label = "ELEMAIL";
        };

        eid: eid {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp N4 &kp N8 &kp N9 &kp P &kp T &kp TAB>;
            label = "EID";
        };

        Rewrite: Rewrite {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp F &kp O &kp R &kp SPACE &kp R &kp E &kp W &kp R &kp I &kp T &kp E &kp SPACE &kp O &kp N &kp SPACE>;
            label = "REWRITE";
        };

        thisisstup: thisisstup {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(T) &kp H &kp I &kp S &kp I &kp S &kp S &kp T &kp U &kp P &kp I &kp D &kp POUND &kp N3>;
            label = "THISISSTUP";
        };

        ccprefresh: ccprefresh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &kp F5>;
            label = "CCPREFRESH";
        };

        pin: pin {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N9 &kp N0 &kp N9 &kp N7 &kp RET>;
            label = "PIN";
        };

        winlogin: winlogin {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp N4 &kp N8 &kp N9 &kp P &kp T &kp TAB &thisisstup &kp RET>;
            label = "winlogin";
        };
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        tobase {
            bindings = <&to 0>;
            key-positions = <57 39>;
            layers = <2 1 4 3 5 6>;
        };

        selectall {
            bindings = <&kp LC(A)>;
            key-positions = <27 26 28>;
            layers = <0 2 1 4 3>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <29 28>;
            layers = <0 2 1 4 3>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <40 41>;
            layers = <0 2 1 4 3>;
        };

        Rewrite {
            bindings = <&Rewrite>;
            key-positions = <43 42>;
            layers = <0 2 1 4 3>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <30 29>;
            layers = <0 2 1 4 3>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <17 15 16>;
            layers = <0 2 1 4 3>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <43 41 42>;
            layers = <0 2 1 4 3>;
        };

        ccprefresh {
            bindings = <&ccprefresh>;
            key-positions = <0 1>;
            layers = <0 2 1 4 3>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <30 31>;
            layers = <0 2 1 4 3>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <30 27>;
            layers = <0 2 1 4 3>;
        };

        maclogin {
            bindings = <&pin>;
            key-positions = <5 4 18>;
            layers = <0 2 1 4 3>;
        };

        eid {
            bindings = <&pin>;
            key-positions = <53 54 55>;
            layers = <0 2 1 4 3>;
        };

        winlogin {
            bindings = <&winlogin>;
            key-positions = <4 5 17 18>;
            layers = <0 2 1 4 3>;
        };

        eracmail {
            bindings = <&eracmail>;
            key-positions = <0 1 13>;
            layers = <0 2 1 4 3>;
        };

        elemaail {
            bindings = <&elemail>;
            key-positions = <57 56 44>;
            layers = <0 2 1 4 3>;
        };

        fastmouse {
            bindings = <&to 2>;
            key-positions = <59 51>;
            layers = <0 2 1 4 3>;
        };

        workpass {
            bindings = <&thisisstup>;
            key-positions = <39 26 40>;
            layers = <0 2 1 4 3>;
        };

        lockqwerty {
            bindings = <&to 5>;
            key-positions = <0 57 59 12>;
            layers = <0>;
        };

        inverse {
            bindings = <&to 1>;
            key-positions = <0 13 26 39 12 25 38 51>;
            layers = <0>;
        };

        gamepad {
            bindings = <&to 6>;
            key-positions = <12 51 59 7>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp ESCAPE        &kp NUMBER_1  &kp NUMBER_2        &kp NUMBER_3    &kp NUMBER_4    &kp N5     &kp UP_ARROW    &kp NUMBER_6  &kp N7           &kp N8               &kp N9                    &kp N0         &kp BACKSPACE
&kp TAB           &kp Q         &kp W               &kp E           &kp R           &kp T      &kp DOWN_ARROW  &kp Y         &kp U            &kp I                &kp O                     &kp P          &kp BACKSLASH
&kp LEFT_CONTROL  &lt 2 A       &kp S               &kp D           &kp F           &kp G      &kp LEFT_ARROW  &kp H         &kp J            &kp K                &kp L                     &kp SEMICOLON  &kp SQT
&kp LEFT_SHIFT    &kp Z         &mt LEFT_CONTROL X  &mt LEFT_GUI C  &mt LEFT_ALT V  &kp B      &kp RIGHT       &kp N         &mt RIGHT_ALT M  &mt RIGHT_GUI COMMA  &mt RIGHT_CONTROL PERIOD  &kp SLASH      &kp RIGHT_SHIFT
&kp K_MUTE        &kp DELETE    &none               &kp SPACE       &kp SPACE       &kp RET    &kp RET         &kp LEFT_GUI  &kp SPACE        &kp SPACE            &none                     &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "base layer";
        };

        inverse {
            bindings = <
&kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8         &kp N9                &kp NUMBER_0             &kp BACKSPACE      &kp UP_ARROW    &kp ESCAPE        &kp NUMBER_1  &kp NUMBER_2        &kp NUMBER_3    &kp NUMBER_4     &kp N5
&kp Y         &kp U         &kp I                &kp O                 &kp P                    &none              &kp DOWN_ARROW  &kp TAB           &kp Q         &kp W               &kp E           &kp R            &kp T
&kp H         &kp J         &kp K                &kp L                 &kp SEMICOLON            &kp SQT            &kp LEFT        &kp LEFT_CONTROL  &kp A         &kp S               &kp D           &kp F            &kp G
&kp N         &kp M         &mt RIGHT_ALT COMMA  &mt RIGHT_GUI PERIOD  &mt RIGHT_CONTROL SLASH  &kp RIGHT_SHIFT    &kp RIGHT       &kp LEFT_SHIFT    &kp Z         &mt LEFT_CONTROL X  &mt LEFT_GUI C  &mt RIGHT_ALT V  &kp B
&kp K_MUTE    &trans        &trans               &trans                &trans                   &trans             &kp RET         &trans            &trans        &trans              &trans          &trans
            >;
        };

        fastmouse {
            bindings = <
&none        &none   &none   &none   &none   &none     &trans  &none     &none              &none              &none             &none   &none
&none        &none   &none   &none   &none   &none     &trans  &none     &msc SCRL_UP       &mmv MOVE_Y(-600)  &msc SCRL_DOWN    &none   &none
&none        &none   &none   &none   &none   &none     &trans  &none     &mmv MOVE_X(-600)  &mmv MOVE_Y(600)   &mmv MOVE_X(600)  &mo 3   &none
&thisisstup  &none   &none   &none   &none   &none     &trans  &none     &none              &mkp MB3           &none             &none   &mkp MB2
&trans       &trans  &trans  &trans  &trans  &trans    &trans  &mkp MB1  &mkp MB1           &trans             &trans            &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        slowmouse {
            bindings = <
&none        &none   &none   &none   &none   &none     &trans  &none     &none              &none              &none             &none   &none
&none        &none   &none   &none   &none   &none     &trans  &none     &msc SCRL_UP       &mmv MOVE_Y(-100)  &msc SCRL_DOWN    &none   &none
&none        &none   &none   &none   &none   &none     &trans  &none     &mmv MOVE_X(-100)  &mmv MOVE_Y(100)   &mmv MOVE_X(100)  &none   &none
&thisisstup  &none   &none   &none   &none   &none     &trans  &none     &none              &mkp MB3           &none             &none   &mkp MB2
&trans       &trans  &trans  &trans  &trans  &trans    &trans  &mkp MB1  &mkp MB1           &trans             &trans            &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        arrownum {
            bindings = <
&none    &none          &none         &none         &none         &none            &trans  &none          &none           &none         &none      &none    &kp BACKSPACE
&kp TAB  &kp PLUS       &kp NUMBER_7  &kp N8        &kp NUMBER_9  &kp NUMBER_0     &trans  &none          &none           &kp UP_ARROW  &none      &none    &none
&none    &none          &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp BACKSPACE    &trans  &none          &kp LEFT_ARROW  &kp DOWN      &kp RIGHT  &none    &none
&none    &kp BACKSLASH  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH        &trans  &none          &none           &none         &none      &none    &none
&trans   &kp DEL        &none         &kp PERIOD    &kp SPACE     &kp RET          &trans  &kp RIGHT_GUI  &kp SPACE       &kp SPACE     &none      &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        lockqwerty {
            bindings = <
&kp ESC           &kp N1      &kp N2  &kp N3  &kp N4     &kp N5     &kp UP     &kp N6    &kp N7     &kp N8            &kp N9             &kp N0      &kp BSPC
&kp TAB           &kp Q       &kp W   &kp E   &kp R      &kp T      &kp DOWN   &kp Y     &kp U      &kp I             &kp O              &kp P       &kp BACKSLASH
&kp LEFT_CONTROL  &kp A       &kp S   &kp D   &kp F      &kp G      &kp LEFT   &kp H     &kp J      &kp K             &kp L              &kp SEMI    &kp SQT
&kp LSHFT         &kp Z       &kp X   &kp C   &kp V      &kp B      &kp RIGHT  &kp N     &kp M      &kp COMMA         &kp DOT            &kp FSLH    &kp RSHFT
&kp K_MUTE        &kp DELETE  &none   &none   &kp SPACE  &kp RET    &kp RET    &kp RGUI  &kp SPACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp DELETE
            >;
        };

        gamepad {
            bindings = <
&none  &none  &none  &none  &none  &none    &kp W  &none      &none    &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &kp D  &none      &none    &none  &none  &none  &kp L
&none  &none  &none  &none  &none  &none    &kp A  &none      &none    &none  &none  &kp U  &kp I
&none  &none  &none  &none  &none  &none    &kp S  &kp J      &kp K    &kp W  &kp H  &kp J  &kp K
&none  &none  &none  &none  &none  &none    &kp K  &kp RSHFT  &kp RET  &kp A  &kp S  &kp D
            >;
        };
    };
};
